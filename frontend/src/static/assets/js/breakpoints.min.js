// breakpoints.js

const breakpoints = (function () {
    "use strict";
  
    const t = {
      list: null,
      media: {},
      events: [],
  
      // 초기화
      init: function (e) {
        t.list = e;
        window.addEventListener("resize", t.poll);
        window.addEventListener("orientationchange", t.poll);
        window.addEventListener("load", t.poll);
        window.addEventListener("fullscreenchange", t.poll);
      },
  
      // 활성화된 브레이크포인트 확인
      active: function (e) {
        let n, a, s, i, r, d, c;
  
        if (!(e in t.media)) {
          if (">=" === e.substr(0, 2)) {
            a = "gte";
            n = e.substr(2);
          } else if ("<=" === e.substr(0, 2)) {
            a = "lte";
            n = e.substr(2);
          } else if (">" === e.substr(0, 1)) {
            a = "gt";
            n = e.substr(1);
          } else if ("<" === e.substr(0, 1)) {
            a = "lt";
            n = e.substr(1);
          } else if ("!" === e.substr(0, 1)) {
            a = "not";
            n = e.substr(1);
          } else {
            a = "eq";
            n = e;
          }
  
          if (n && n in t.list) {
            i = t.list[n];
            if (Array.isArray(i)) {
              r = parseInt(i[0]);
              d = parseInt(i[1]);
  
              if (isNaN(r)) {
                c = i[1].substr(String(d).length);
              } else {
                c = i[0].substr(String(r).length);
              }
  
              s = t._createMediaQuery(a, r, d, c);
            } else {
              s = i.charAt(0) === "(" ? `screen and ${i}` : i;
            }
  
            t.media[e] = s ? s : false;
          }
        }
  
        return t.media[e] !== false && window.matchMedia(t.media[e]).matches;
      },
  
      // 미디어 쿼리 생성 로직
      _createMediaQuery: function (a, r, d, c) {
        switch (a) {
          case "gte":
            return `screen and (min-width: ${r}${c})`;
          case "lte":
            return `screen and (max-width: ${d}${c})`;
          case "gt":
            return `screen and (min-width: ${d + 1}${c})`;
          case "lt":
            return `screen and (max-width: ${r - 1}${c})`;
          case "not":
            return `screen and (max-width: ${r - 1}${c}), screen and (min-width: ${d + 1}${c})`;
          default:
            return `screen and (min-width: ${r}${c}) and (max-width: ${d}${c})`;
        }
      },
  
      // 이벤트 등록
      on: function (e, n) {
        t.events.push({ query: e, handler: n, state: false });
        if (t.active(e)) n();
      },
  
      // 이벤트 처리
      poll: function () {
        t.events.forEach(function (n) {
          if (t.active(n.query)) {
            if (!n.state) {
              n.state = true;
              n.handler();
            }
          } else {
            n.state = false;
          }
        });
      },
    };
  
    return {
      init: t.init,
      on: t.on,
      active: t.active,
    };
  })();
  
  export default breakpoints;
  